--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/__main__.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/__main__.py
@@ -239,7 +239,7 @@ def main_wrapper(args=None):
         main(args=args)
     except SystemExit as e:
         if e.code != 0:
-            print(f"ERROR running glean_parser v{glean_parser.__version__}")
+            print("ERROR running glean_parser v{}".format((glean_parser.__version__)))
         raise
 
 
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/coverage.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/coverage.py
@@ -122,7 +122,7 @@ def coverage(
         parser_config = {}
 
     if output_format not in OUTPUTTERS:
-        raise ValueError(f"Unknown outputter {output_format}")
+        raise ValueError("Unknown outputter {}".format((output_format)))
 
     metrics_files = util.ensure_list(metrics_files)
 
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/data_review.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/data_review.py
@@ -43,7 +43,7 @@ def generate(
         return 1
 
     # I tried [\W\Z] but it complained. So `|` it is.
-    reobj = re.compile(f"\\W{bug}\\W|\\W{bug}$")
+    reobj = re.compile("\\W{}\\W|\\W{}$".format((bug), (bug)))
     durations = set()
     metrics_table = ""
     for category_name, metrics in all_objects.value.items():
@@ -56,8 +56,8 @@ def generate(
             one_line_desc = metric.description.replace("\n", " ")
             sensitivity = ", ".join([s.name for s in metric.data_sensitivity])
             last_bug = metric.bugs[-1]
-            metrics_table += f"{category_name}.{metric_name} | "
-            metrics_table += f"{one_line_desc} | {sensitivity} | {last_bug}\n"
+            metrics_table += "{}.{} | ".format((category_name), (metric_name))
+            metrics_table += "{} | {} | {}\n".format((one_line_desc), (sensitivity), (last_bug))
 
             durations.add(metric.expires)
 
@@ -66,10 +66,10 @@ def generate(
         if duration == "never":
             collection_duration = "This collection will be collected permanently."
         else:
-            collection_duration = f"This collection has expiry '{duration}'"
+            collection_duration = "This collection has expiry '{}'".format((duration))
     else:
         collection_duration = "Parts of this collection expire at different times: "
-        collection_duration += f"{durations}"
+        collection_duration += "{}".format((durations))
 
     if "never" in durations:
         collection_duration += "\n**TODO: identify at least one individual here** "
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/javascript.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/javascript.py
@@ -115,7 +115,7 @@ def output(
     platform = options.get("platform", "webext")
     if platform not in ["qt", "webext"]:
         raise ValueError(
-            f"Unknown platform: {platform}. Accepted platforms are qt and webext."
+            "Unknown platform: {}. Accepted platforms are qt and webext.".format((platform))
         )
     version = options.get("version")
     if platform == "qt" and version is None:
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/lint.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/lint.py
@@ -52,10 +52,10 @@ def _english_list(items: List[str]) -> s
     if len(items) == 0:
         return ""
     elif len(items) == 1:
-        return f"'{items[0]}'"
+        return "'{}'".format((items[0]))
     else:
         return "{}, or '{}'".format(
-            ", ".join([f"'{x}'" for x in items[:-1]]), items[-1]
+            ", ".join(["'{}'".format((x)) for x in items[:-1]]), items[-1]
         )
 
 
@@ -98,10 +98,10 @@ def check_common_prefix(
     if i > 0:
         common_prefix = "_".join(first[:i])
         yield (
-            f"Within category '{category_name}', all metrics begin with "
-            f"prefix '{common_prefix}'."
+            "Within category '{}', all metrics begin with "
+            "prefix '{}'."
             "Remove the prefixes on the metric names and (possibly) "
-            "rename the category."
+            "rename the category.".format((category_name), (common_prefix))
         )
 
 
@@ -141,17 +141,17 @@ def check_unit_in_name(
             or unit_in_name == time_unit.name
         ):
             yield (
-                f"Suffix '{unit_in_name}' is redundant with time_unit "
-                f"'{time_unit.name}'. Only include time_unit."
+                "Suffix '{}' is redundant with time_unit "
+                "'{}'. Only include time_unit.".format((unit_in_name), (time_unit.name))
             )
         elif (
             unit_in_name in TIME_UNIT_ABBREV.keys()
             or unit_in_name in TIME_UNIT_ABBREV.values()
         ):
             yield (
-                f"Suffix '{unit_in_name}' doesn't match time_unit "
-                f"'{time_unit.name}'. "
-                "Confirm the unit is correct and only include time_unit."
+                "Suffix '{}' doesn't match time_unit "
+                "'{}'. "
+                "Confirm the unit is correct and only include time_unit.".format((unit_in_name), (time_unit.name))
             )
 
     elif memory_unit is not None:
@@ -160,26 +160,26 @@ def check_unit_in_name(
             or unit_in_name == memory_unit.name
         ):
             yield (
-                f"Suffix '{unit_in_name}' is redundant with memory_unit "
-                f"'{memory_unit.name}'. "
-                "Only include memory_unit."
+                "Suffix '{}' is redundant with memory_unit "
+                "'{}'. "
+                "Only include memory_unit.".format((unit_in_name), (memory_unit.name))
             )
         elif (
             unit_in_name in MEMORY_UNIT_ABBREV.keys()
             or unit_in_name in MEMORY_UNIT_ABBREV.values()
         ):
             yield (
-                f"Suffix '{unit_in_name}' doesn't match memory_unit "
-                f"{memory_unit.name}'. "
-                "Confirm the unit is correct and only include memory_unit."
+                "Suffix '{}' doesn't match memory_unit "
+                "{}'. "
+                "Confirm the unit is correct and only include memory_unit.".format((unit_in_name), (memory_unit.name))
             )
 
     elif unit is not None:
         if unit_in_name == unit:
             yield (
-                f"Suffix '{unit_in_name}' is redundant with unit param "
-                f"'{unit}'. "
-                "Only include unit."
+                "Suffix '{}' is redundant with unit param "
+                "'{}'. "
+                "Only include unit.".format((unit_in_name), (unit))
             )
 
 
@@ -193,8 +193,8 @@ def check_category_generic(
 
     if category_name in GENERIC_CATEGORIES:
         yield (
-            f"Category '{category_name}' is too generic. "
-            f"Don't use {_english_list(GENERIC_CATEGORIES)} for category names"
+            "Category '{}' is too generic. "
+            "Don't use {} for category names".format((category_name), (_english_list(GENERIC_CATEGORIES)))
         )
 
 
@@ -205,10 +205,10 @@ def check_bug_number(
 
     if len(number_bugs):
         yield (
-            f"For bugs {', '.join(number_bugs)}: "
+            "For bugs {}: "
             "Bug numbers are deprecated and should be changed to full URLs. "
-            f"For example, use 'http://bugzilla.mozilla.org/{number_bugs[0]}' "
-            f"instead of '{number_bugs[0]}'."
+            "For example, use 'http://bugzilla.mozilla.org/{}' "
+            "instead of '{}'.".format((', '.join(number_bugs)), (number_bugs[0]), (number_bugs[0]))
         )
 
 
@@ -231,7 +231,7 @@ def check_misspelled_pings(
         for builtin in pings.RESERVED_PING_NAMES:
             distance = _hamming_distance(ping, builtin)
             if distance == 1:
-                yield f"Ping '{ping}' seems misspelled. Did you mean '{builtin}'?"
+                yield "Ping '{}' seems misspelled. Did you mean '{}'?".format((ping), (builtin))
 
 
 def check_user_lifetime_expiration(
@@ -305,8 +305,8 @@ class GlinterNit:
 
     def format(self):
         return (
-            f"{self.check_type.name.upper()}: {self.check_name}: "
-            f"{self.name}: {self.msg}"
+            "{}: {}: "
+            "{}: {}".format((self.check_type.name.upper()), (self.check_name), (self.name), (self.msg))
         )
 
 
@@ -439,7 +439,7 @@ def lint_yaml_files(
     if len(nits):
         print("Sorry, Glean found some glinter nits:", file=file)
         for (path, p) in nits:
-            print(f"{path} ({p.line}:{p.column}) - {p.message}", file=file)
+            print("{} ({}:{}) - {}".format((path), (p.line), (p.column), (p.message)), file=file)
         print("", file=file)
         print("Please fix the above nits to continue.", file=file)
 
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/markdown.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/markdown.py
@@ -73,7 +73,7 @@ def metrics_docs(obj_name: str) -> str:
     if obj_name.startswith("labeled_"):
         fixedup_name += "s"
 
-    return f"https://mozilla.github.io/glean/book/user/metrics/{fixedup_name}.html"
+    return "https://mozilla.github.io/glean/book/user/metrics/{}.html".format((fixedup_name))
 
 
 def ping_docs(ping_name: str) -> str:
@@ -84,7 +84,7 @@ def ping_docs(ping_name: str) -> str:
     if ping_name not in pings.RESERVED_PING_NAMES:
         return ""
 
-    return f"https://mozilla.github.io/glean/book/user/pings/{ping_name}.html"
+    return "https://mozilla.github.io/glean/book/user/pings/{}.html".format((ping_name))
 
 
 def if_empty(
@@ -137,11 +137,11 @@ def ping_review_title(data_url: str, ind
     short_url = path[1:].replace("/pull/", "#")
 
     if params and params["id"]:
-        return f"Bug {params['id'][0]}"
+        return "Bug {}".format((params['id'][0]))
     elif url_object.netloc == "github.com":
         return short_url
 
-    return f"Review {index}"
+    return "Review {}".format((index))
 
 
 def ping_bugs(
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/metrics.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/metrics.py
@@ -147,7 +147,7 @@ class Metric:
 
         metric_type = metric_info["type"]
         if not isinstance(metric_type, str):
-            raise TypeError(f"Unknown metric type {metric_type}")
+            raise TypeError("Unknown metric type {}".format((metric_type)))
         return cls.metric_types[metric_type](
             category=category,
             name=name,
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/parser.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/parser.py
@@ -44,7 +44,7 @@ def _update_validator(validator):
         if len(missing_properties):
             missing_properties = sorted(list(missing_properties))
             yield ValidationError(
-                f"Missing required properties: {', '.join(missing_properties)}"
+                "Missing required properties: {}".format((', '.join(missing_properties)))
             )
 
     validator.VALIDATORS["required"] = required
@@ -71,7 +71,7 @@ def _load_file(
         return {}, None
 
     if content is None:
-        yield util.format_error(filepath, "", f"'{filepath}' file can not be empty.")
+        yield util.format_error(filepath, "", "'{}' file can not be empty.".format((filepath)))
         return {}, None
 
     if not isinstance(content, dict):
@@ -82,7 +82,7 @@ def _load_file(
 
     schema_key = content.get("$schema")
     if not isinstance(schema_key, str):
-        raise TypeError(f"Invalid schema key {schema_key}")
+        raise TypeError("Invalid schema key {}".format((schema_key)))
 
     filetype: Optional[str] = None
     try:
@@ -130,7 +130,7 @@ def _get_schema(
             util.format_error(
                 filepath,
                 "",
-                f"$schema key must be one of {', '.join(schemas.keys())}",
+                "$schema key must be one of {}".format((', '.join(schemas.keys()))),
             )
         )
     return schemas[schema_id]
@@ -202,7 +202,7 @@ def _instantiate_metrics(
         if not config.get("allow_reserved") and category_key.split(".")[0] == "glean":
             yield util.format_error(
                 filepath,
-                f"For category '{category_key}'",
+                "For category '{}'".format((category_key)),
                 "Categories beginning with 'glean' are reserved for "
                 "Glean internal use.",
             )
@@ -210,7 +210,7 @@ def _instantiate_metrics(
         all_objects.setdefault(category_key, OrderedDict())
 
         if not isinstance(category_val, dict):
-            raise TypeError(f"Invalid content for {category_key}")
+            raise TypeError("Invalid content for {}".format((category_key)))
 
         for metric_key, metric_val in category_val.items():
             try:
@@ -220,7 +220,7 @@ def _instantiate_metrics(
             except Exception as e:
                 yield util.format_error(
                     filepath,
-                    f"On instance {category_key}.{metric_key}",
+                    "On instance {}.{}".format((category_key), (metric_key)),
                     str(e),
                 )
                 metric_obj = None
@@ -231,7 +231,7 @@ def _instantiate_metrics(
                 ):
                     yield util.format_error(
                         filepath,
-                        f"On instance {category_key}.{metric_key}",
+                        "On instance {}.{}".format((category_key), (metric_key)),
                         'Only internal metrics may specify "all-pings" '
                         'in "send_in_pings"',
                     )
@@ -250,8 +250,8 @@ def _instantiate_metrics(
                     filepath,
                     "",
                     (
-                        f"Duplicate metric name '{category_key}.{metric_key}' "
-                        f"already defined in '{already_seen}'"
+                        "Duplicate metric name '{}.{}' "
+                        "already defined in '{}'".format((category_key), (metric_key), (already_seen))
                     ),
                 )
             else:
@@ -282,12 +282,12 @@ def _instantiate_pings(
             if ping_key in RESERVED_PING_NAMES:
                 yield util.format_error(
                     filepath,
-                    f"For ping '{ping_key}'",
-                    f"Ping uses a reserved name ({RESERVED_PING_NAMES})",
+                    "For ping '{}'".format((ping_key)),
+                    "Ping uses a reserved name ({})".format((RESERVED_PING_NAMES)),
                 )
                 continue
         if not isinstance(ping_val, dict):
-            raise TypeError(f"Invalid content for ping {ping_key}")
+            raise TypeError("Invalid content for ping {}".format((ping_key)))
         ping_val["name"] = ping_key
         try:
             ping_obj = Ping(
@@ -296,7 +296,7 @@ def _instantiate_pings(
                 **ping_val,
             )
         except Exception as e:
-            yield util.format_error(filepath, f"On instance '{ping_key}'", str(e))
+            yield util.format_error(filepath, "On instance '{}'".format((ping_key)), str(e))
             continue
 
         if ping_obj is not None:
@@ -311,8 +311,8 @@ def _instantiate_pings(
             yield util.format_error(
                 filepath,
                 "",
-                f"Duplicate ping name '{ping_key}' "
-                f"already defined in '{already_seen}'",
+                "Duplicate ping name '{}' "
+                "already defined in '{}'".format((ping_key), (already_seen)),
             )
         else:
             all_objects.setdefault("pings", {})[ping_key] = ping_obj
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/translate.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/translate.py
@@ -85,8 +85,8 @@ def transform_metrics(objects):
     for denominator_name, numerator_names in numerators_by_denominator.items():
         if denominator_name not in counters:
             print(
-                f"No `counter` named {denominator_name} found to be used as"
-                "denominator for {numerator_names}",
+                "No `counter` named {} found to be used as"
+                "denominator for {}".format((denominator_name), (numerator_names)),
                 file=sys.stderr,
             )
             return 1
@@ -161,7 +161,7 @@ def translate_metrics(
                 for filepath in output_dir.glob(clear_pattern):
                     filepath.unlink()
             if len(list(output_dir.iterdir())):
-                print(f"Extra contents found in '{output_dir}'.")
+                print("Extra contents found in '{}'.".format((output_dir)))
 
         # We can't use shutil.copytree alone if the directory already exists.
         # However, if it doesn't exist, make sure to create one otherwise
@@ -201,7 +201,7 @@ def translate(
     format_desc = OUTPUTTERS.get(output_format, None)
 
     if format_desc is None:
-        raise ValueError(f"Unknown output format '{output_format}'")
+        raise ValueError("Unknown output format '{}'".format((output_format)))
 
     return translate_metrics(
         input_filepaths,
--- firefox-esr-91.3.0esr.orig/third_party/python/glean_parser/glean_parser/util.py
+++ firefox-esr-91.3.0esr/third_party/python/glean_parser/glean_parser/util.py
@@ -121,7 +121,7 @@ def load_yaml_or_json(path: Path):
         with path.open("r", encoding="utf-8") as fd:
             return yaml_load(fd)
     else:
-        raise ValueError(f"Unknown file extension {path.suffix}")
+        raise ValueError("Unknown file extension {}".format((path.suffix)))
 
 
 def ensure_list(value: Any) -> Sequence[Any]:
@@ -327,9 +327,9 @@ def format_error(filepath: Union[str, Pa
     else:
         filepath = "<string>"
     if header:
-        return f"{filepath}: {header}\n{_utils.indent(content)}"
+        return "{}: {}\n{}".format((filepath), (header), (_utils.indent(content)))
     else:
-        return f"{filepath}:\n{_utils.indent(content)}"
+        return "{}:\n{}".format((filepath), (_utils.indent(content)))
 
 
 def parse_expires(expires: str) -> datetime.date:
@@ -347,8 +347,8 @@ def parse_expires(expires: str) -> datet
             return datetime.date.fromisoformat(expires)
     except ValueError:
         raise ValueError(
-            f"Invalid expiration date '{expires}'. "
-            "Must be of the form yyyy-mm-dd in UTC."
+            "Invalid expiration date '{}'. "
+            "Must be of the form yyyy-mm-dd in UTC.".format((expires))
         )
 
 
@@ -378,7 +378,7 @@ def validate_expires(expires: str) -> No
     max_date = datetime.datetime.now() + datetime.timedelta(days=730)
     if date > max_date.date():
         raise ValueError(
-            f"'{expires}' is more than 730 days (~2 years) in the future.",
+            "'{}' is more than 730 days (~2 years) in the future.".format((expires)),
             "Please make sure this is intentional.",
             "You can supress this warning by adding EXPIRATION_DATE_TOO_FAR to no_lint",
             "See: https://mozilla.github.io/glean_parser/metrics-yaml.html#no_lint",
